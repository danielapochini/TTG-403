document.getElementById("btnCadFunc").onclick = function () {
        location.href = "@{CadFuncionarioR}";
};

document.getElementById("btnListFunc").onclick = function () {
        location.href = "@{ListFuncionarioR}";
};

document.getElementById("btnLog").onclick = function () {
        location.href = "@{LogoutR}";
};

L.mapbox.accessToken = 'pk.eyJ1IjoiZGFucG9jY2hpbmkiLCJhIjoiY2lvbmw0c245MDAwNXRybTZqY3BpNmh4eCJ9.Y7lbFO1q-PrNDlPBmbTb6w';

var map = L.mapbox.map('map', 'danpocchini.07moajng', {
  attributionControl: false,
  tileLayer: {
    maxNativeZoom: 19
  }
}).setView([-23.954863, -46.380008], 13)


var firebase = new Firebase('https://sauipeexpress.firebaseio.com/');
var markersRef = firebase.child('geolocalizacao/');
var markers = {};

function addPoint(uuid, position) {
    var marker = L.marker([position.coords.latitude, position.coords.longitude], {
        icon: L.mapbox.marker.icon({
            'marker-size': 'large',
            'marker-symbol': 'scooter',
            'marker-color': position.cor
        })
    })
    marker.addTo(map);
    marker.bindLabel(position.usuario, { noHide: true });
    marker.addTo(map);
    marker.showLabel();

    markers[uuid] = marker;

    map.fitBounds(Object.keys(markers)
        .map(function(uuid) {
            return markers[uuid].getLatLng()
        }))

}

function removePoint(uuid) {
    map.removeLayer(markers[uuid])
}

function updatePoint(uuid, position) {
    var marker = markers[uuid]
    marker.setLatLng([position.coords.latitude, position.coords.longitude]);
    
}

function putPoint(uuid, position) {
    if (markers[uuid])
        updatePoint(uuid, position)
    else
        addPoint(uuid, position)
}

map.on('ready', function() {
    markersRef.on('child_added', function(childSnapshot) {
        var uuid = childSnapshot.key()
        var position = childSnapshot.val()
        

        addPoint(uuid, position)
    })

    markersRef.on('child_changed', function(childSnapshot) {
        var uuid = childSnapshot.key()
        var position = childSnapshot.val()

        putPoint(uuid, position)
    })

    markersRef.on('child_removed', function(oldChildSnapshot) {
        var uuid = oldChildSnapshot.key()

        removePoint(uuid)
    })
});

setInterval(function() {
    markersRef.limitToFirst(200)
        .once('value', function(snap) {
            var now = Math.floor(Date.now() / 1000)

            snap.forEach(function(childSnapshot) {
                var uuid = childSnapshot.key()
                if (childSnapshot.val()
                    .timestamp < now - 60 * 30) {
                    markersRef.child(uuid)
                        .set(null)
                        //markers[uuid] = null
                }
            })
        })
}, 5000);

